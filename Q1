cat > mygrep.sh << 'EOF'
#!/bin/bash

# Initialize variables
show_line_numbers=false
invert_match=false
search_string=""
filename=""
usage="Usage: $0 [-n] [-v] <search_string> <filename>"

# Handle command line options
while [[ "$1" =~ ^- ]]; do
    case "$1" in
        -n) show_line_numbers=true ;;
        -v) invert_match=true ;;
        -nv|-vn) 
            show_line_numbers=true
            invert_match=true ;;
        --help)
            echo "mygrep.sh - a simplified grep implementation"
            echo "$usage"
            echo "Options: "
            echo "  -n      Show line numbers"
            echo "  -v      Invert match (show non-matching lines)"
            exit 0 ;;
        *)
            echo "Invalid option: $1" >&2
            echo "$usage" >&2
            exit 1 ;;
    esac
    shift
done

# Check for required arguments
if [ $# -lt 2 ]; then
    if [ $# -eq 1 ] && [ "$invert_match" = true ]; then
        echo "Error: Missing search string" >&2
        echo "$usage" >&2
        exit 1
    fi
    echo "Error: Not enough arguments" >&2
    echo "$usage" >&2
    exit 1
fi

search_string="$1"
filename="$2"

# Check if file exists
if [ ! -f "$filename" ]; then
    echo "Error: File '$filename' not found" >&2
    exit 1
fi

# Read file line by line
line_number=0
while IFS= read -r line; do
    line_number=$((line_number + 1))
    
    # Case insensitive match
    if [[ "${line,,}" =~ ${search_string,,} ]]; then
        match=true
    else
        match=false
    fi
    
    # Handle invert match
    if [ "$invert_match" = true ]; then
        match=!$match
    fi
    
    # Print if matched
    if $match; then
        if [ "$show_line_numbers" = true ]; then
            printf "%d: " "$line_number"
        fi
        printf "%s\n" "$line"
    fi
done < "$filename"
EOF
chmod +x mygrep.sh
./mygrep.sh test testfile.txt

Hardest Part: The most challenging part was handling the combination of options (-vn vs -nv) and ensuring proper error messages for all invalid input cases while maintaining clean code structure.
For improved option parsing, we could use getopts:
while getopts ":nv" opt; do
    case $opt in
        n) show_line_numbers=true ;;
        v) invert_match=true ;;
        \?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
    esac
done
shift $((OPTIND-1))
